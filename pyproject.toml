[project]
name = "voice-impersonation-attack-framework"
version = "0.1.0"
description = "Voice Impersonation Attack Framework (VIAF) for Boson Hackathon - Testing speaker recognition vulnerabilities with Higgs Audio v2"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Boson Hackathon Team", email = "team@boson.ai"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]
dependencies = [
    # Core ML/Audio
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    
    # Speaker Recognition Systems
    "speechbrain>=0.5.0",
    "pyannote.audio>=3.0.0",
    
    # API and Web
    "openai>=1.0.0",
    "requests>=2.28.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    
    # Data Processing
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "jupyter>=1.0.0",
    "datasets>=2.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/boson-ai/voice-impersonation-attack-framework"
Repository = "https://github.com/boson-ai/voice-impersonation-attack-framework"
Documentation = "https://voice-impersonation-attack-framework.readthedocs.io"
Issues = "https://github.com/boson-ai/voice-impersonation-attack-framework/issues"

[project.scripts]
viaf = "src.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "playground", "experiments"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
